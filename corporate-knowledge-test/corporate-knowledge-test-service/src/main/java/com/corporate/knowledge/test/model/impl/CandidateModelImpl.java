/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.corporate.knowledge.test.model.impl;

import com.corporate.knowledge.test.model.Candidate;
import com.corporate.knowledge.test.model.CandidateModel;
import com.corporate.knowledge.test.model.CandidateSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Candidate service. Represents a row in the &quot;knowledgeTest_Candidate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CandidateModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CandidateImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CandidateImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CandidateModelImpl
	extends BaseModelImpl<Candidate> implements CandidateModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a candidate model instance should use the <code>Candidate</code> interface instead.
	 */
	public static final String TABLE_NAME = "knowledgeTest_Candidate";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"candidateId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"company", Types.VARCHAR},
		{"passed", Types.BOOLEAN}, {"points", Types.INTEGER},
		{"testDate", Types.TIMESTAMP}, {"location", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("candidateId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("company", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("passed", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("points", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("testDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table knowledgeTest_Candidate (uuid_ VARCHAR(75) null,candidateId LONG not null primary key,name VARCHAR(75) null,company VARCHAR(75) null,passed BOOLEAN,points INTEGER,testDate DATE null,location VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table knowledgeTest_Candidate";

	public static final String ORDER_BY_JPQL =
		" ORDER BY candidate.candidateId DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY knowledgeTest_Candidate.candidateId DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long CANDIDATEID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Candidate toModel(CandidateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Candidate model = new CandidateImpl();

		model.setUuid(soapModel.getUuid());
		model.setCandidateId(soapModel.getCandidateId());
		model.setName(soapModel.getName());
		model.setCompany(soapModel.getCompany());
		model.setPassed(soapModel.isPassed());
		model.setPoints(soapModel.getPoints());
		model.setTestDate(soapModel.getTestDate());
		model.setLocation(soapModel.getLocation());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Candidate> toModels(CandidateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Candidate> models = new ArrayList<Candidate>(soapModels.length);

		for (CandidateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CandidateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _candidateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCandidateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _candidateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Candidate.class;
	}

	@Override
	public String getModelClassName() {
		return Candidate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Candidate, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Candidate, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Candidate, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Candidate)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Candidate, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Candidate, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Candidate)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Candidate, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Candidate, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Candidate>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Candidate.class.getClassLoader(), Candidate.class,
			ModelWrapper.class);

		try {
			Constructor<Candidate> constructor =
				(Constructor<Candidate>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Candidate, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Candidate, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Candidate, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Candidate, Object>>();
		Map<String, BiConsumer<Candidate, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Candidate, ?>>();

		attributeGetterFunctions.put("uuid", Candidate::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Candidate, String>)Candidate::setUuid);
		attributeGetterFunctions.put("candidateId", Candidate::getCandidateId);
		attributeSetterBiConsumers.put(
			"candidateId",
			(BiConsumer<Candidate, Long>)Candidate::setCandidateId);
		attributeGetterFunctions.put("name", Candidate::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Candidate, String>)Candidate::setName);
		attributeGetterFunctions.put("company", Candidate::getCompany);
		attributeSetterBiConsumers.put(
			"company", (BiConsumer<Candidate, String>)Candidate::setCompany);
		attributeGetterFunctions.put("passed", Candidate::getPassed);
		attributeSetterBiConsumers.put(
			"passed", (BiConsumer<Candidate, Boolean>)Candidate::setPassed);
		attributeGetterFunctions.put("points", Candidate::getPoints);
		attributeSetterBiConsumers.put(
			"points", (BiConsumer<Candidate, Integer>)Candidate::setPoints);
		attributeGetterFunctions.put("testDate", Candidate::getTestDate);
		attributeSetterBiConsumers.put(
			"testDate", (BiConsumer<Candidate, Date>)Candidate::setTestDate);
		attributeGetterFunctions.put("location", Candidate::getLocation);
		attributeSetterBiConsumers.put(
			"location", (BiConsumer<Candidate, String>)Candidate::setLocation);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCandidateId() {
		return _candidateId;
	}

	@Override
	public void setCandidateId(long candidateId) {
		_columnBitmask = -1L;

		_candidateId = candidateId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getCompany() {
		if (_company == null) {
			return "";
		}
		else {
			return _company;
		}
	}

	@Override
	public void setCompany(String company) {
		_company = company;
	}

	@JSON
	@Override
	public boolean getPassed() {
		return _passed;
	}

	@JSON
	@Override
	public boolean isPassed() {
		return _passed;
	}

	@Override
	public void setPassed(boolean passed) {
		_passed = passed;
	}

	@JSON
	@Override
	public int getPoints() {
		return _points;
	}

	@Override
	public void setPoints(int points) {
		_points = points;
	}

	@JSON
	@Override
	public Date getTestDate() {
		return _testDate;
	}

	@Override
	public void setTestDate(Date testDate) {
		_testDate = testDate;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Candidate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Candidate toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Candidate>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CandidateImpl candidateImpl = new CandidateImpl();

		candidateImpl.setUuid(getUuid());
		candidateImpl.setCandidateId(getCandidateId());
		candidateImpl.setName(getName());
		candidateImpl.setCompany(getCompany());
		candidateImpl.setPassed(isPassed());
		candidateImpl.setPoints(getPoints());
		candidateImpl.setTestDate(getTestDate());
		candidateImpl.setLocation(getLocation());

		candidateImpl.resetOriginalValues();

		return candidateImpl;
	}

	@Override
	public int compareTo(Candidate candidate) {
		int value = 0;

		if (getCandidateId() < candidate.getCandidateId()) {
			value = -1;
		}
		else if (getCandidateId() > candidate.getCandidateId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Candidate)) {
			return false;
		}

		Candidate candidate = (Candidate)obj;

		long primaryKey = candidate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		CandidateModelImpl candidateModelImpl = this;

		candidateModelImpl._originalUuid = candidateModelImpl._uuid;

		candidateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Candidate> toCacheModel() {
		CandidateCacheModel candidateCacheModel = new CandidateCacheModel();

		candidateCacheModel.uuid = getUuid();

		String uuid = candidateCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			candidateCacheModel.uuid = null;
		}

		candidateCacheModel.candidateId = getCandidateId();

		candidateCacheModel.name = getName();

		String name = candidateCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			candidateCacheModel.name = null;
		}

		candidateCacheModel.company = getCompany();

		String company = candidateCacheModel.company;

		if ((company != null) && (company.length() == 0)) {
			candidateCacheModel.company = null;
		}

		candidateCacheModel.passed = isPassed();

		candidateCacheModel.points = getPoints();

		Date testDate = getTestDate();

		if (testDate != null) {
			candidateCacheModel.testDate = testDate.getTime();
		}
		else {
			candidateCacheModel.testDate = Long.MIN_VALUE;
		}

		candidateCacheModel.location = getLocation();

		String location = candidateCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			candidateCacheModel.location = null;
		}

		return candidateCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Candidate, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Candidate, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Candidate, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Candidate)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Candidate, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Candidate, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Candidate, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Candidate)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Candidate>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _candidateId;
	private String _name;
	private String _company;
	private boolean _passed;
	private int _points;
	private Date _testDate;
	private String _location;
	private long _columnBitmask;
	private Candidate _escapedModel;

}